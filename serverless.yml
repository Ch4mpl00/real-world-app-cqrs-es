service: realworld-cqrs-es-app
useDotenv: true

plugins:
  - serverless-esbuild
  - serverless-offline
#  - serverless-plugin-warmup

provider: ${file(_provider.yml)}

functions:
  - ${file(src/components/common/functions.yml)}
  - ${file(src/components/user/functions.yml)}
  - ${file(src/components/article/functions.yml)}

custom:
  tscpaths:
    tsconfigPath: tsconfig.json
  esbuild:
    bundle: true
    minify: false

resources:
  Resources:
    UserProjectionSqsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: user-projection.fifo
        FifoQueue: true
    UserGreetingsEmailsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: user_greetings.fifo
        FifoQueue: true
    ArticleProjectionSqsQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: article-projection.fifo
        FifoQueue: true
    DomainEventsSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        FifoTopic: true
        TopicName: DomainEventsTopic.fifo
    UserProjectionSqsQueueSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: !Ref DomainEventsSNSTopic
        Endpoint:
          Fn::GetAtt:
            - UserProjectionSqsQueue
            - Arn
        Protocol: sqs
        RawMessageDelivery: "true"
    UserGreetingsEmailsQueueSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: !Ref DomainEventsSNSTopic
        Endpoint:
          Fn::GetAtt:
            - UserGreetingsEmailsQueue
            - Arn
        Protocol: sqs
        RawMessageDelivery: "true"
    ArticleProjectionSqsQueueSubscription:
      Type: "AWS::SNS::Subscription"
      Properties:
        TopicArn: !Ref DomainEventsSNSTopic
        Endpoint:
          Fn::GetAtt:
            - ArticleProjectionSqsQueue
            - Arn
        Protocol: sqs
        RawMessageDelivery: "true"
    ExtraQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref UserProjectionSqsQueue
          - !Ref UserGreetingsEmailsQueue
          - !Ref ArticleProjectionSqsQueue
        PolicyDocument:
          Statement:
            - Sid: Allow-SNS-SendMessage-${self:service}
              Effect: Allow
              Principal:
                Service: sns.amazonaws.com
              Action:
                - sqs:SendMessage
              Resource: arn:aws:sqs:*
    EventLogDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: event-log
        AttributeDefinitions:
          - AttributeName: pkey
            AttributeType: S
          - AttributeName: version
            AttributeType: N
        KeySchema:
          - AttributeName: pkey
            KeyType: HASH
          - AttributeName: version
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE
    OpenSearchServiceDomain:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: 'projections'
        ClusterConfig:
          DedicatedMasterEnabled: false
          InstanceCount: '1'
          ZoneAwarenessEnabled: false
          InstanceType: 't3.small.search'
        EBSOptions:
          EBSEnabled: true
          VolumeSize: '20'
          VolumeType: 'gp2'
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                AWS: ${env:OPENSEARCH_PRINCIPAL_ROLE}
              Action: 'es:*'
              Resource: ${env:OPENSEARCH_RESOURCE}
        AdvancedOptions:
          rest.action.multi.allow_explicit_index: 'true'
  Outputs:
    DomainEventsSNSTopicArn:
      Value: !Ref DomainEventsSNSTopic
    OpenSearchDomainEndpoint:
      Value:
        Fn::GetAtt:
          - OpenSearchServiceDomain
          - DomainEndpoint
    OpenSearchDomainArn:
      Value:
        Fn::GetAtt:
          - OpenSearchServiceDomain
          - DomainArn

