createArticle:
  handler: src/components/article/handlers.createArticleHandler
  events:
    - http:
        path: articles
        method: post
        cors: true
        integration: lambda-proxy
        authorizer:
          name: tokenAuthorizer
          identitySource: method.request.header.Authorization
          type: token
updateArticleBySlug:
  handler: src/components/article/handlers.updateArticleBySlugHandler
  events:
    - http:
        path: articles/{slug}
        method: put
        cors: true
        integration: lambda-proxy
        authorizer:
          name: tokenAuthorizer
          identitySource: method.request.header.Authorization
          type: token
getAllArticles:
  handler: src/components/article/handlers.getAllArticlesHandler
  events:
    - http:
        path: articles
        method: get
        cors: true
        integration: lambda-proxy
        authorizer:
          name: tokenOrGuestAuthorizer
          identitySource: method.request.header.Authorization
          type: request
getArticleBySlug:
  handler: src/components/article/handlers.getArticleBySlugHandler
  events:
    - http:
        path: articles/{slug}
        method: get
        cors: true
        integration: lambda-proxy
        authorizer:
          name: tokenOrGuestAuthorizer
          identitySource: method.request.header.Authorization
          type: request
createArticleProjection:
  handler: src/components/article/handlers.createProjectionHandler
  events:
    - sqs:
        arn:
          Fn::GetAtt:
            - ArticleProjectionSqsQueue
            - Arn
        batchSize: 10
        functionResponseType: ReportBatchItemFailures

#UpdateArticle:
#  handler: src/components/user/handlers.updateUserHandler
#  events:
#    - http:
#        path: user
#        method: put
#        cors: true
#        integration: lambda-proxy
#        authorizer:
#          name: tokenAuthorizer
#          identitySource: method.request.header.Authorization
#          type: token

